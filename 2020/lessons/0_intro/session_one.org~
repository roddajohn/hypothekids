#+AUTHOR: Rodda John
#+TITLE: Hypothekids Python Class 1

#+REVEAL_THEME: white

#+REVEAL_TITLE_SLIDE_BACKGROUND: src/logo.png
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE: 1080px

#+OPTIONS: toc:nil

#+REVEAL_PLUGINS: (highlight)

* Hi
#+ATTR_REVEAL: :frag (appear)
- Who am I
- Why we are here
- What we are going to do
  - Introduction to Computer Science
  - Introduction to Computer Programming through Python
  - How to ask for help and use search engines well
  - Programming applied to bio labs
** What is Computer Science?
   #+ATTR_REVEAL: :frag (appear)
   - What do you think of when I say Computer Science?
   - Is it a discipline or a tool?
   - Do you need a computer to study it?
*** Formal Definition
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_QUOTE
Computer science is the study of the theory, experimentation, and engineering that form the basis for the design and use of computers. It is the scientific and practical approach to computation and its applications and the systematic study of the feasibility, structure, expression, and mechanization of the methodical procedures that underlie the acquisition, representation, processing, storage, communication of, and access to, information.
#+END_QUOTE
*** So...
#+ATTR_REVEAL: :frag (appear)
- Is it a discipline or a tool?
- Do you need a computer to study it?
** And to make sure
#+ATTR_REVEAL: :frag (appear)
- What is Computer Programming?
- What's the difference?
*** Formal Definition
#+BEGIN_QUOTE
Computer programming is the process of designing and building an executable computer program to accomplish a specific computer result.
#+END_QUOTE
** Disclaimer
#+ATTR_REVEAL: :frag (appear)
- I don't do biology.
- I don't really do a lot of Computer Programming.
- I do a lot of Computer Science.
- I'm eccentric and precise.  Please ask questions.
- I respect thought, regardless of if it's right or wrong.
** Zoom / Teaching Generally
#+ATTR_REVEAL: :frag (appear)
- I have a bunch of screens, I can see reactions, so use them!
- I will be switching between a presentation, a whiteboard, and code
- Asking questions in chat works, as does raising your hand and I'll call on you
- Speed up and slow down are VERY helpful!
- I have PDFs of all the presentations, I'll distribute them.  Some things are included as reference.
* The Broad Overview
#+ATTR_REVEAL: :frag (appear)
- What is a computer?
- Wires
** Conclusions
#+ATTR_REVEAL: :frag (appear)
- A computer is really dumb
- A computer does certain things well, and most things poorly
- A computer is quite basic and low level
** Computer Architecture
#+ATTR_REVEAL: :frag (appear)
- Differentiation between high level and low level (human to computer)
- Computers understand binary (it's wires)
- We understand English
- English --> Python --> C --> Assembly --> Binary
* Lexigraphy
#+ATTR_REVEAL: :frag (appear)
- Interpreter
- Language
- Script / Program
- Executing / Running a Program
** Tools
 | Term        | For Us           |
 |-------------+------------------|
 | Language    | Python (for now) |
 | Interpreter | repl.it, IDLE    |
 | Script      | We'll write them |
 | Execution   | GCC              |
 We will use a language interpreter to execute our scripts.
** Let's set it up
#+ATTR_REVEAL: :frag (appear)
- We need an interpreter
- [[https://python.org][python.org]] OR [[https://repl.it][repl.it]]
- Download IDLE OR create an account on repl.it
** What we need to know how to do
- Create a script
  - IDLE: File --> New (Save it)
  - repl.it: new repl (Python)
- Run the script
  - IDLE: Run --> Run Module
  - repl.it: Click run at the top
* Let's Begin
#+ATTR_REVEAL: :frag (appear)
- Let's try the following (type it in and run it):
  #+BEGIN_SRC python
    print('Hello World!')
  #+END_SRC
** But wait, what'd that do
   #+ATTR_REVEAL: :frag (appear)
   - From before:
     #+BEGIN_SRC python
       print('Hello World!')
     #+END_SRC
   - ~print()~ is a function
   - ~'Hello World!'~ is an argument
   - So, to generalize:
     - ~print(arg)~ prints the ~arg~
* Variables
  #+ATTR_REVEAL: :frag (appear)
  - Does ~print(Hello world!)~ work?
  1) Predict first
  2) Test it
  3) Analyze the error
    - What's the error?
** Strings
  #+ATTR_REVEAL: :frag (appear)
  - A string is any expression of characters enclosed in ~'~ or ~"~
  - Is ~'h'~ a string?
  - How about ~h~?
  - What about ~'3'~?
  - How about ~3~?
  - How about ~'Hi, what's up Bob?'~?
  - What about ~"Hi, what's up Bob?"~?
  - So what variable type does the print function accept?
** Numbers
  #+ATTR_REVEAL: :frag (appear)
  - A number is a representation of, well, a number...
  - ~3~ is a number, ~'3'~ is not
  - You can do math on numbers!
  - ~3 + 3~ is valid Python
  - So is ~3 - 3~, ~3 * 3~, ~3 / 3~, and even ~3 ** 3~.
  - What is ~**~
  - Technically speaking, these are function shortcuts
    - ~3 + 3~ is really ~add(3, 3)~
  - Try some stuff out
  - Does Python understand parentheses?
** Ok, but what is a variable?
   It's kinda like a big box

   #+ATTR_REVEAL: :frag (appear)
   - Let's see it in action:
     #+BEGIN_SRC python
       x = 1
       y = 2

       z = x + y
       print(z)

       print(x + y)
     #+END_SRC

   - Let's go through our process again:
     - Predict
     - Test
     - Analyze
** Same drill
   Predict, test, analyze...

   #+ATTR_REVEAL: :frag (appear)
   - Here's another one for you
     #+BEGIN_SRC python
       x = 'this'
       y = 'is'
       z = 'a word'

       nstring = x + y + z
       print(nstring)
     #+END_SRC

   - Given above:
     #+BEGIN_SRC python
       print(x + y + z)
     #+END_SRC

   - And finally:
     #+BEGIN_SRC python
       print(x + ' ' + y + ' ' + z)
     #+END_SRC

* Boolean Expressions
    Just another variable type...

    #+ATTR_REVEAL: :frag (appear)
    - Can only be ~True~ or ~False~
    - What operators could we use to get boolean values?
    - How about to combine two boolean values to one?
    - Let's check this out:
      #+BEGIN_SRC python
	a, b = 1, 2

	x, y = True, False

	print(a < b)
      #+END_SRC
    - How about:
      #+BEGIN_SRC python
	print(x and y)
	print(x or y)
	print (x and not y)
      #+END_SRC
** Boolean Operators
  Non-Boolean Variables --> Boolean Variables:
  #+ATTR_REVEAL: :frag (appear)
  -
    | Operator | Description  |
    |----------+--------------|
    | <        | Less than    |
    | >        | Greater than |
    | ==       | Equality     |
    | <=       | lte          |
    | >=       | gte          |
    | !=       | Not equals   |

** Boolean Operators
  Boolean Variables --> Boolean Variables:
  #+ATTR_REVEAL: :frag (appear)
  - 
     | Operator | Description |
     |----------+-------------|
     | and      | logical and |
     | or       | logical or  |
     | not      | logical not |
** Um, why can't we just use ~=~ for equality
   Like normal people...
   #+ATTR_REVEAL: :frag (appear)
   - Do we already have ~=~ in python?
   - What does it do?
   - Consider:
     #+BEGIN_SRC python
       x = 1

       x == 1
     #+END_SRC
   - Do we want them to be interchangeable?
** For Reference
Boolean Table
| x | y | x and y | x or y |
|---+---+---------+--------|
| t | t | t       | t      |
| t | f | f       | t      |
| f | t | f       | t      |
| f | f | f       | f      |
   
* Control Structures
  If this, then that

  #+ATTR_REVEAL: :frag (appear)
  - This is like a fork in the road
  - What's a good way to represent whether or not to execute code?  Variable type?
  - Consider
    #+BEGIN_SRC python
      x, y = 1, 2

      if (x < y):
	  print('x is less than y')
    #+END_SRC
  - When will it execute the print statement?
** If, elif, and else
   #+ATTR_REVEAL: :frag (appear)
   - What's the difference here, is there one?
     #+BEGIN_SRC python
       x, y = 1, 2

       if (x < y):
	   print ('x is less than y')

       if (x < y):
	   print ('Yipee')

       if (x > y):
	   print('Nope')
     #+END_SRC
     #+BEGIN_SRC python
       x, y = 1, 2

       if (x < y):
	   print('x is less than y')

       elif (x < y):
	   print('Yipee')

       else:
	   print('Nope')
     #+END_SRC


